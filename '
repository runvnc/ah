from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
import os
import json
from lib.plugins import (
    load_plugin_manifest, update_plugin_manifest, plugin_install,
    save_plugin_manifest,
    plugin_update, toggle_plugin_state, get_plugin_path
)

router = APIRouter()

class DirectoryRequest(BaseModel):
    directory: str

class PluginRequest(BaseModel):
    plugin: str

class GitHubPluginRequest(BaseModel):
    plugin: str
    url: str

class TogglePluginRequest(BaseModel):
    plugin: str
    enabled: bool

@router.post("/scan-directory")
async def scan_directory(request: DirectoryRequest):
    directory = request.directory
    if not os.path.isdir(directory):
        raise HTTPException(status_code=400, detail="Invalid directory path")
    
    print(f"Scanning directory {directory}")
    discovered_plugins = discover_plugins(directory)

    manifest = load_plugin_manifest()
    manifest['plugins']['local'].update(discovered_plugins)
    save_plugin_manifest(manifest)

    return {"message": f"Scanned {len(discovered_plugins)} plugins in {directory}"}

@router.get("/get-all-plugins")
async def get_all_plugins():
    manifest = load_plugin_manifest()
    return manifest['plugins']

@router.post("/install-local-plugin")
async def install_local_plugin(request: PluginRequest):
    plugin_name = request.plugin
    manifest = load_plugin_manifest()
    if plugin_name not in manifest['plugins']['local']:
        raise HTTPException(status_code=404, detail="Plugin not found")
    
    plugin_path = get_plugin_path(plugin_name)
    if not plugin_path:
        raise HTTPException(status_code=400, detail="Plugin path not found")
    
    try:
        plugin_install(plugin_name, source='local', source_path=plugin_path)
        return {"message": f"Plugin {plugin_name} installed successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/install-github-plugin")
async def install_github_plugin(request: GitHubPluginRequest):
    plugin_name = request.plugin
    github_url = request.url
    
    try:
        plugin_install(plugin_name, source='github', source_path=github_url)
        return {"message": f"Plugin {plugin_name} installed successfully from GitHub"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/update-plugin")
async def update_plugin(request: PluginRequest):
    plugin_name = request.plugin
    if not get_plugin_path(plugin_name):
        raise HTTPException(status_code=404, detail="Plugin not found")
    
    try:
        success = plugin_update(plugin_name)
        if success:
            return {"message": f"Plugin {plugin_name} updated successfully"}
        else:
            raise HTTPException(status_code=500, detail="Failed to update plugin")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/toggle-plugin")
async def toggle_plugin(request: TogglePluginRequest):
    plugin_name = request.plugin
    if not get_plugin_path(plugin_name):
        raise HTTPException(status_code=404, detail="Plugin not found")
    
    try:
        success = toggle_plugin_state(plugin_name, request.enabled)
        if success:
            return {"message": f"Plugin {plugin_name} {'enabled' if request.enabled else 'disabled'} successfully"}
        else:
            raise HTTPException(status_code=500, detail="Failed to toggle plugin state")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# Helper function
def discover_plugins(directory):
    discovered = {}
    for item in os.listdir(directory):
        item_path = os.path.join(directory, item)
        if os.path.isdir(item_path) and os.path.isfile(os.path.join(item_path, 'plugin_info.json')):
            with open(os.path.join(item_path, 'plugin_info.json'), 'r') as f:
                plugin_info = json.load(f)
            plugin_info['enabled'] = False
            plugin_info['source'] = 'local'
            plugin_info['source_path'] = item_path
            discovered[plugin_info['name']] = plugin_info

    return discovered
